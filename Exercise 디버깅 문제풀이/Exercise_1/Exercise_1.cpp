#include <iostream>
using namespace std;
#include "Knight.h"


// [사양서]
// 기사는 생명력(hp), 공격력(attack)을 갖고 있으며
// 기본값은 Hp = 100, Attack = 10입니다.
// 원활한 게임 진행을 위해 기사를 2개 생성하고,
// 1번 기사는 기본값으로,
// 2번 기사는 Hp를 200으로 올려서 설정합니다.

// [Bug Report #1]
// 2번 기사의 정보가 사양서와 일치하지 않습니다.
// 2번 기사의 공격력이 엉뚱한 값(음수)로 되어 있습니다.
// - 공격력이 음수로 설정된 원인을 찾아주세요
// - 2번 기사의 공격력이 기본값(10)으로 설정되길 희망합니다.

int main()
{
	/* [풀이]
	1. 우선 k1의 경우, 기본 생성자로 생성을 하고
	그 기본 생성자 -> Knight::Knight() : _hp(100), _attack(10) {} 으로
	이루어진 것을 알 수 있다. 이와 같이 해당 값의 초기값을 미리 넣어주는 
	형태로 제작되었기에 정상적으로 출력되었음을 알 수 있다. */
	Knight* k1 = new Knight();
	k1->PrintInfo();
	
	/* [풀이]
	타입 변환 생성자 -> 기타 생성자를 사용해 k2를 생성하고 있는 모습을 보여준다.
	인자값으로는 정상적으로 넘어갔다.

	하지만 Knigth::Knigth(int hp) : _hp(hp) {} 이렇게 작성되어서 진행되고 있다는 것이 문제이다.
	맴버 변수로 _hp, _attack 을 받고 있는 Knigth 가 _hp 하나만 받고 있는 상태라면

	Knigth를 동적할당으로 생성하고 난후, k2가 할당받은 메모리 값에는 

	_hp = 200
	_attack = 음수값 <- 메모리영역에 임시적으로 컴파일러가 넣어둔 값이 들어가게 되어
	이를 출력하고 있는 상황으로 생각된다.

	그렇기에 [타입 변환 생성자]에 추가적으로 _attack의 값을 넣어주어야 하며, 
	넣어주게 된다면 해당 오류는 사라질 것이다.
	*/
	Knight* k2 = new Knight(200);
	k2->PrintInfo();

	delete k1;
	delete k2;
}
