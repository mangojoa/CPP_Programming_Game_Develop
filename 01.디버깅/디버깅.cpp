#include <iostream>
using namespace std;

/* 디버깅을 위한 방법
- [조사식]
안에서 사용되는 변수의 [값], [타입] 등을 알 수 있다.

그리고 이 안에서 메모리를 직접적으로 수정을 진행할 수 있다.
이는 분기문을 테스트 할 때, 해당 부분에서 정상적으로 분기를 나누는지 확인을 할 때 사용할 수도 있다.

- [호출 스택]
브래이크 포인터를 걸고 프로그램의 F10-[프로시저 단위 실행], F11-[한 단계씩 코드 실행] F5-[디버깅 시작]

위의 단축키를 이용해 프로그렘의 실행 단위별로 체크를 할 수 있다.
하지만 함수를 타고타고 들어가다보면 이를 외워서 기억하고 있기란 쉽지 않기 때문에
'호출 스택'을 사용하여 내가 타고들어온 함수들의 지점을 기억하는 것이 가능하다. (유용하게 잘 사용할 것 같다)

크래시가 날 경우에도 이를 이용하여 추적할 수도 있다.

- [중단점]
브레이크 포인트를 실시간(디버깅 중에도)으로 관리해주는 기능을 사용할 수 있다.

- [중단점 (조건)]
브레이크 포인트는 무조건 적으로 멈추지만 이에 대한 '조건'을 설정할 수 있다.

int cal = A3 + B4; 에 브레이크 포인트를 걸고 A3 == 3 일때만 브레이크 포인트를 걸 수 있는 개념인 것이다.
조건이 걸린 브레이크 포인트는 일반 브레이크 포인트와 다르게 생겼다!

- [중단점 (작업)]
브레이크 포인트가 실행되기 전 cout << a << endl; 처럼 log를 남길 수 있는 기능을 사용할 수 있다.

***** 프로그렘이 멈추거나 버그가 난다면 그 버그를 찾기보다는 디버깅을 먼저 진행하도록 하자. 
그래야 문제의 원인을 빠르게 찾을 수 있다!!
*/

void Test2() {
	int b = 0;
}

void Test1() {
	int a = 0;

	Test2();
}

int main() {

	int number = 10;

	Test1();

	return 0;

}